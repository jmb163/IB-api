#!/usr/bin/python3

from ibapicommon import *
import threading
import time
import datetime
import json
import os
from ibapi.contract import Contract, ContractDetails

def stamp():
	day = datetime.date.fromtimestamp(time.time())
	return day.__str__()

def cache_result(fname, original_callback, callback_args=None, callback_kwargs={}):
		if os.path.exists(fname):
			print('USING CACHED RESULT')
			with open(fname, 'r') as f:
				return json.load(f)
		else:
			print('NO CACHED RESULT AVAILABLE, DOING NEW STUFF')
			data = original_callback(*callback_args, **callback_kwargs)
			with open(fname, 'w') as f:
				json.dump(data, f, indent=3)
			return data

class app_context():
	def __init__(self):
		self.app = IB()
		self.app.connectPortal()
		self.api_thread = threading.Thread(target=run_loop, args=(self.app,), daemon=True)
		self.api_thread.start()
	def __enter__(self):
		return self.app

	def __exit__(self, exc_type, exc_value, exc_tb):
		# cleanup
		print("STOPPING THE APP NOW")
		self.app.disconnect()
def main():
	with app_context() as app:
		print("CONNECTION STATUS: {}".format(app.isConnected()))
		vix_details = app.details('VIX', security_type='IND')
		vix_data = cache_result('vix_daily_bars-{}'.format(stamp()), app.daily_data, ('VIX',), {'ndays':400, 'contract':vix_details[0]})
		META_data = cache_result('SNOW_daily_bars-{}'.format(stamp()), app.daily_data, ('SNOW',), {'ndays':400})
		# META_data = app.daily_data('META', ndays=400)
		# vix_data = app.daily_data('VIX', ndays=400, security_type='IND')
		vix_series = [x['close'] for x in vix_data]
		meta_series = [x['close'] for x in META_data]
		print('VIX | META CORRELATION: {}'.format(correlation(vix_series, meta_series)))
		print("CORRELATION SHEDULE: ")
		print(json.dumps(correlation_schedule(vix_series, meta_series), indent=3))

if __name__ == '__main__':
	main()
