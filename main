#!/usr/bin/python3

from ibapicommon import *
import threading
import time
import json
import os
from ibapi.contract import Contract, ContractDetails

def cache_result(fname, original_callback, callback_args=None, callback_kwargs={}):
		if os.path.exists(fname):
			print('USING CACHED RESULT')
			with open(fname, 'r') as f:
				return json.load(f)
		else:
			print('NO CACHED RESULT AVAILABLE, DOING NEW STUFF')
			data = original_callback(*callback_args, **callback_kwargs)
			with open(fname, 'w') as f:
				json.dump(data, f, indent=3)
			return data

def main():
	app = IB()
	app.connectPortal()
	print(app.isConnected())
	api_thread = threading.Thread(target=run_loop, args=(app,), daemon=True)
	api_thread.start()
	current_symbol = 'META'
	print("Last Price of symbol")
	price = app.last_price(current_symbol)
	print("    $ {}".format(price))
	# full_chain_args = ('TSLA',)
	# full_chain_callback = app.full_options_chain
	# full_chain = cache_result('TSLA_full_chain.json', full_chain_callback, full_chain_args)
	# opt = app.options_contract_details(267.5, '20230623', 'CALL', 'META')
	# opt2 = cache_result('test_file', app.options_contract_details, (290.0, '20230630', 'CALL', current_symbol,), {})
	# print(json.dumps(opt2, indent=3))
	daily_bars = cache_result('daily_data', app.daily_data, ('SPY',), {'ndays':400})
	daily_bars2 = cache_result('daily_data2', app.daily_data, ('META',), {'ndays':400})
	# print(json.dumps(daily_bars, indent=3))
	# pseries = [x['close'] for x in daily_bars]
	# print("VOLATILITY: {}".format(volatility(pseries)))
	# v100 = volatility_schedule(pseries)
	# print(json.dumps(v100, indent=3))
	# probs = option_probabilities(288.73, 285, .3658, 5)
	# print("PROBABILITIES:")
	# print(json.dumps(probs, indent=3))
	print("CORRELATION: ")
	pseries_a = [x['close'] for x in daily_bars]
	pseries_b = [x['close'] for x in daily_bars2]
	corr = correlation_b(pseries_a, pseries_b)
	print("{}".format(corr))
	# print("100 DAY VOLS: {}".format(v100))
	# print(len(v100))
	# print("avg 100 day: {}".format(sum(v100)/len(v100)))
	app.disconnect()

if __name__ == '__main__':
	main()
